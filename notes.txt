Comp vision notes:
1. dlib + OpenCV allows for face classification + feature classification. See
https://docs.opencv.org/3.1.0/d7/d8b/tutorial_py_face_detection.html#gsc.tab=0
for a project that does eye detection. Can then measure angle + size of eyes to determine what to do with glasses

2. Alternatively, find face classification algorithm that measures head tilt some other way, perform rotation on the image
to frontalize it, then do Haar-like rectangles to find eyes. Scale glasses and place them, and then rotate glasses and image
back to original orientation



Haar cascade vs deepnet solution:
 -- for detecting eyes and faces, will want to test differences between haar cascade and deepnet


 Notes for initializing AWS instance and connecting to it:
  - For connecting: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html
  - The command to connect: ssh -i ryan-computer-vision-key.pem ubuntu@ec2-52-55-242-160.compute-1.amazonaws.com
  - To do SCP: scp -i ryan-computer-vision-key.pem file_here ubuntu@ec2-52-55-242-160.compute-1.amazonaws.com:destination_here

Questions to ask:
 - Would it be reasonable to compare a Haar Cascade classifier vs CNN classifier on faces and eyes and see which one does better?
 - Followup: What's the standard way to measure accuracy in this case? Would it be a simple testing accuracy on face vs. non-face images?
   How about testing on images with multiple faces on it? (or should i not do this)
 - Should i be adhering to certain image dimensions when training the classifier? I've seen make negative images 100x100 and faces 50x50,
   but unsure how reliable/important this is
 - 

 Manually place eyes on set of like 20 images, don't use images in training set
 Test each classifier on the perfect images, create some sort of distance function (distance from centers)
 (intersection/union of bounding boxes -- IOU)


Game plan:
 - Use both the Haar cascade and CNN tensorflow out-of-box solutions to find eyes. Test which one is more accurate (somehow)
   - while it's accepted that CNNs are usually better nowadays, are their bounding boxes more accurate, or just the rate at which they recognize?
   - In review: mention that generally known that CNNs are more accurate for object detection, but question the accuracy of the detection? Can a Haar Cascade detector locate eyes more accurately than a CNN?
 - Take the better method and use it to place the glasses. Measure this against a small set of 20 images that are perfectly labelled.

Glasses:
 Regular: Width 600px, height 205px. 76px from top of image to bottom of nose frame
 Sunglasses: Width 600px, height 209px


Interesting assumption: head always taller than wider?

Bounding boxes on ellipse:
https://stackoverflow.com/questions/87734/how-do-you-calculate-the-axis-aligned-bounding-box-of-an-ellipse

REferences:
CNN face detection (using FaceNet): http://jekel.me/2017/How-to-detect-faces-using-facenet/
Haar cascade face + eyes detection: opencv tutorial, 
comparision of CNN vs Haar: https://dzone.com/articles/cnn-vs-cascade-classifiers-for-object-detection

Face database: FDDB: Face Detection Data Set and Benchmark at http://vis-www.cs.umass.edu/fddb/
Uses Faces in the Wild for faces, then provides annotations

in fold 2, 285 images with total of 519 faces
first image in fold 2:
2002/07/28/big/img_416
[(53.8011831203448, 21.353383418584098, 88.95143375931039, 121.82969316283182), (285.3230637867992, 10.930149311060417, 71.56117442640164, 105.08978737787916), (346.7922990576719, 79.57017142820564, 36.134583884656195, 47.90292114358871)]


****************************************************
FACE DETECTION RESULTS:
The standard used for whether or not a face was correctly detected was that the center of the detected face
must be within 40% of the average height and width of a face to true center. Additionally, the width and height of
bounding box of detected face must have been > .5 and < 1.5 times the width and height of true bounding box. These
parameters were chosen after experimenting with many values. Making ranges too wide allowed for non-correctly detected
faces to be accidentally detected (false positives), while making ranges too small missed detections that were correct.

Face detection accuracies were reported with these ranges used.

For Haar cascade detector:
explaining params: http://www.bogotobogo.com/python/OpenCV_Python/python_opencv3_Image_Object_Detection_Face_Detection_Haar_Cascade_Classifiers.php

scale factor values: (time is hh:mm:ss.ms)
1.3 and 5, 1326/2067 faces, 0.6415094339622641, 0:00:21.676171
1.2 and 5, 1424/2067 faces, 0.6889211417513305, 0:00:30.377876
1.1 and 5, 1542/2067 faces, 0.7460087082728593, 0:00:48.634285
1.05 and 5, 1630/2067 faces, 0.7885824866956942, 0:01:29.261559
1.01 and 5, 1828/2067 faces, 0.8843734881470731, 0:06:51.084492

1.3 and 4, 1395/2067 faces, 0.6748911465892597, 0:00:25.266321
1.2 and 4, 1476/2067 faces, 0.714078374455733, 0:00:30.429258
1.1 and 4, 1577/2067 faces, 0.7629414610546686, 0:01:07.422060
1.05 and 4, 1652/2067 faces, 0.799225931301403, 0:01:41.136731
1.01 and 4, 1869/2067 faces, 0.9042089985486212, 0:08:23.776399

1.3 and 3, 1445/2067 faces, 0.6990807934204161, 0:00:22.047011
1.2 and 3, 1517/2067 faces, 0.733913884857281, 0:00:29.524132
1.1 and 3, 1610/2067 faces, 0.7789066279632317, 0:00:49.368626
1.05 and 3, 1693/2067 faces, 0.8190614417029511, 0:01:29.713371
1.01 and 3, 1908/2067 faces, 0.9230769230769231, 0:06:57.774940

1.3 and 2, 1505/2067 faces, 0.7281083696178036, 0:00:22.130912
1.2 and 2, 1560/2067 faces, 0.7547169811320755, 0:00:38.926712
1.1 and 2, 1655/2067 faces, 0.8006773101112724, 0:00:51.998133
1.05 and 2, 1735/2067 faces, 0.8393807450411224, 0:01:29.194843
1.01 and 2, 1957/2067 faces, 0.9467827769714562, 0:08:04.406453

CNN detector:
factor .709: 1592/2067 faces, 0.7701983551040155, 0:16:10.188261
factor .600: 1560/2067 faces, 0.7547169811320755, 0:16:07.263717
grayscale images:
alter size of images:

avg height: 142.58539351061276
avg width: 94.11600875170973
over 5171 faces



